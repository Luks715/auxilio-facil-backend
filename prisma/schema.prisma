// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Tabela Endereco
model Endereco {
  id          Int      @id @default(autoincrement())
  cep         String
  estado      String
  municipio   String
  bairro      String
  complemento String?

  CidadaoEnderecos    CidadaoEnderecos[]
  Empresa             Empresa? // Um endereço pode ter uma empresa
  Escola              Escola?  // Um endereço pode ter uma escola

  dono          Cidadao?
}

// Tabela Condicao
model Condicao {
  id              Int      @id @default(autoincrement())
  tipo            String   // desempregado, gestante, surdo, mudo, etc.

  CidadaoCondicao CidadaoCondicoes[]
}

// Tabela Cidadao
model Cidadao {
  id              Int                  @id @default(autoincrement())
  cpf             String               @unique
  nome            String
  data_nascimento DateTime
  usuario         Usuario?

  enderecoPrincipal Endereco @relation(fields: [enderecoPrincipalId], references: [id])
  enderecoPrincipalId Int    @unique
  
  CidadaoDependentes CidadaoDependente[] @relation("Dependentes")
  CidadaoResponsavel CidadaoDependente[] @relation("Responsaveis")

  CidadaoEnderecos  CidadaoEnderecos[]
  CidadaoCondicoes  CidadaoCondicoes[]
  CidadaoAuxilios   CidadaoAuxilios[]
  CidadaoEscolas    CidadaoEscolas[]
  CidadaoEmpresas   CidadaoEmpresas[]
  UserNotificacoes  UserNotificacoes[]
}

// Tabela Usuario
model Usuario {
  id        Int      @id @default(autoincrement())
  tipo      String   // cidadao, administrador, gestor
  email     String   @unique
  senha     String
  cidadaoId Int      @unique

  cidadao   Cidadao  @relation(fields: [cidadaoId], references: [id])
}

// Tabela Requisito
model Requisito {
  id        Int      @id @default(autoincrement())
  descricao String
  auxilioId Int

  auxilio   Auxilio @relation(fields: [auxilioId], references: [id])
}

// Tabela Auxilio
model Auxilio {
  id                 Int      @id @default(autoincrement())
  nome               String
  valor_minimo       Int
  descricao          String
  tem_vagas          Boolean

  requisitos          Requisito[]
  CidadaoAuxilios     CidadaoAuxilios[]
}

model CidadaoEnderecos {
  id                 Int @id @default(autoincrement())
  cidadaoId          Int
  enderecoId         Int

  cidadao Cidadao    @relation(fields: [cidadaoId], references: [id])
  endereco Endereco  @relation(fields: [enderecoId], references: [id])
}

model CidadaoCondicoes {
  id            Int       @id @default(autoincrement())
  cidadaoId     Int
  condicaoId    Int
  data_inicio   DateTime
  valido_ate      DateTime?  // Adiciona a data_fim para controlar a validade

  cidadao       Cidadao   @relation(fields: [cidadaoId], references: [id])
  condicao      Condicao  @relation(fields: [condicaoId], references: [id])

  @@unique([cidadaoId, condicaoId])  // Garante que a combinação cidadao + condicao seja única
}

model CidadaoAuxilios {
  id           Int      @id @default(autoincrement())
  cidadaoId    Int
  auxilioId    Int
  inscrito     Boolean @default(false)
  elegivel     Boolean @default(false)

  cidadao      Cidadao     @relation(fields: [cidadaoId], references: [id])
  auxilio      Auxilio @relation(fields: [auxilioId], references: [id])

  @@unique([cidadaoId, auxilioId]) // Evita duplicação de registros
}

model CidadaoDependente {
  id              Int       @id @default(autoincrement())
  responsavelId   Int
  dependenteId    Int
  status          String    // Cônjuge, Filho, etc.

  responsavel     Cidadao   @relation("Dependentes", fields: [responsavelId], references: [id])
  dependente      Cidadao   @relation("Responsaveis", fields: [dependenteId], references: [id])
}

model Empresa {
  id          Int      @id @default(autoincrement())
  nome        String
  cnpj        String   @unique
  tipo        String   // pública ou privada
  enderecoId  Int      @unique
  endereco    Endereco @relation(fields: [enderecoId], references: [id])
  sedeId      Int?

  sede        Empresa? @relation("EmpresaSede", fields: [sedeId], references: [id])
  filiais     Empresa[] @relation("EmpresaSede")
  escolas     Escola[]
  CidadaoEmpresas  CidadaoEmpresas[]
}

model Escola {
  id          Int      @id @default(autoincrement())
  nome        String
  enderecoId  Int      @unique
  empresaId   Int?

  endereco    Endereco @relation(fields: [enderecoId], references: [id])
  empresa     Empresa? @relation(fields: [empresaId], references: [id])

  alunos  CidadaoEscolas[]
}

model CidadaoEscolas {
  id        Int      @id @default(autoincrement())
  cidadaoId Int
  escolaId  Int
  matricula String
  ativo     Boolean
  status    String // Ensino médio completo, Ensino superior incompleto, etc...

  cidadao   Cidadao  @relation(fields: [cidadaoId], references: [id])
  escola    Escola   @relation(fields: [escolaId], references: [id])
}

model CidadaoEmpresas {
  id        Int      @id @default(autoincrement())
  cidadaoId Int
  empresaId Int
  salario   Int

  cidadao   Cidadao  @relation(fields: [cidadaoId], references: [id])
  empresa   Empresa  @relation(fields: [empresaId], references: [id])
}

model Notificacao {
  id        Int      @id @default(autoincrement())
  cidadaoId Int
  mensagem  String

  UserNotificacoes UserNotificacoes[]
}

model UserNotificacoes {
  id            Int      @id @default(autoincrement())
  cidadaoId     Int
  notificacaoId Int
  lida          Boolean

  cidadao       Cidadao  @relation(fields: [cidadaoId], references: [id])
  notificacao   Notificacao  @relation(fields: [notificacaoId], references: [id])
}